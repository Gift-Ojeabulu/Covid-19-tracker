[{"C:\\Users\\HP\\covid-19-tracker\\src\\index.js":"1","C:\\Users\\HP\\covid-19-tracker\\src\\App.js":"2","C:\\Users\\HP\\covid-19-tracker\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\covid-19-tracker\\src\\Infobox.js":"4","C:\\Users\\HP\\covid-19-tracker\\src\\InfoBox.js":"5","C:\\Users\\HP\\covid-19-tracker\\src\\Map.js":"6","C:\\Users\\HP\\covid-19-tracker\\src\\Table.js":"7","C:\\Users\\HP\\covid-19-tracker\\src\\util.js":"8","C:\\Users\\HP\\covid-19-tracker\\src\\LineGraph.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":4795,"mtime":1608268241074,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":607,"mtime":1608073941831,"results":"14","hashOfConfig":"11"},{"size":939,"mtime":1608268485888,"results":"15","hashOfConfig":"11"},{"size":692,"mtime":1608246061430,"results":"16","hashOfConfig":"11"},{"size":420,"mtime":1608265598675,"results":"17","hashOfConfig":"11"},{"size":1951,"mtime":1608265412941,"results":"18","hashOfConfig":"11"},{"size":2298,"mtime":1608265820294,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1r8xdok",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\HP\\covid-19-tracker\\src\\index.js",[],["41","42"],"C:\\Users\\HP\\covid-19-tracker\\src\\App.js",["43"],"import React, { useState, useEffect } from 'react';\nimport { \n  MenuItem, \n  FormControl, \n  Select, \n  Card, \n  CardContent\n} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport './App.css';\nimport Table from \"./Table\";  \nimport { sortData } from './util'\nimport  LineGraph from \"./LineGraph\";\nimport Map from \"./Map\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\nimport {prettyPrintStat} from './util';\n\n  function App() {\n    const [countries, setCountries] = useState([]);\n    const [country,setCountry] = useState('worldwide');\n    const [countryInfo, setCountryInfo] = useState({});\n    const [tableData, setTableData] = useState([]);\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [mapCenter,setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n    const [mapZoom,setMapZoom] = useState(3);\n    const [mapCountries,setMapCountries] = useState([]); \n    const [color, setColor] = useState('red');\n  \n\n    useEffect(() => {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data) => {\n          setCountryInfo(data);\n        });\n    }, []);\n\n\n\n    useEffect(()  =>{\n      //  sends a requests ,wait for it and do something with the info\n\n      const getCountriesData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,//United States ,United Kingdom,Canada\n              value: country.countryInfo.iso2 //UK ,USA,FR\n            }));\n            \n            const sortedData = sortData(data);\n            setTableData(sortedData);\n            setCountries(countries);\n            setMapCountries(data);\n        });\n      };\n\n      getCountriesData();\n\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n\n  return (\n    <div className=\"app\">\n    <div className=\"app_left\">\n    <div className=\"app_header\">\n      <h1>COVID-19 TRACKER</h1>\n      <FormControl className=\"app_dropdown\">\n      <Select variant=\"outlined\" onChange={onCountryChange} value ={country}>\n        <MenuItem value='worldwide'>Worldwide</MenuItem>\n          {/*Loop through all the countries and show various dropdown,show various options*/}\n          {\n            countries.map((country )=>(\n            <MenuItem value={country.value}>{country.name}</MenuItem>\n\n            ))}\n         \n        </Select>\n    </FormControl>\n    </div>\n\n    <div className=\"app_stats\">\n    <InfoBox\n              active = {casesType === 'cases'}\n              onClick = {(e) => {\n                setCasesType('cases') \n                setColor('red')\n              } }\n              title=\"Coronavirus cases\"\n              total = {prettyPrintStat(countryInfo.cases)}\n              cases = {prettyPrintStat(countryInfo.todayCases)}\n          />\n          <InfoBox\n              active = {casesType === 'recovered'}\n              onClick = {(e) => {\n                setCasesType('recovered') \n                setColor('green')\n              } }\n              title=\"Recovered\"\n              total = {prettyPrintStat(countryInfo.recovered)}\n              cases = {prettyPrintStat(countryInfo.todayRecovered)}\n          />\n\n          <InfoBox\n              active = {casesType === 'deaths'}\n              onClick = {(e) => {\n                setCasesType('deaths') \n                setColor('lightcoral')\n              } }\n              title=\"Coronavirus deaths\"\n              total = {prettyPrintStat(countryInfo.deaths)}\n              cases = {prettyPrintStat(countryInfo.todayDeaths)}\n          />\n        </div>\n\n        <Map \n            casesType = {casesType}\n            center = {mapCenter}\n            zoom = {mapZoom}\n            countries = {mapCountries}\n            color = {color}\n        />\n        </div>\n        <Card className=\"app__right\">\n              <CardContent>\n                  <h3>Live cases by country</h3>\n                  <Table countries = {tableData}/>\n                  <h3 style = {{paddingTop: '25px', paddingBottom: '25px'}}>Worldwide new {casesType}</h3>\n                  <LineGraph casesType = {casesType} color = {color}/>\n              </CardContent>\n        </Card>\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\HP\\covid-19-tracker\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\covid-19-tracker\\src\\Infobox.js",[],"C:\\Users\\HP\\covid-19-tracker\\src\\InfoBox.js",[],"C:\\Users\\HP\\covid-19-tracker\\src\\Map.js",[],"C:\\Users\\HP\\covid-19-tracker\\src\\Table.js",[],"C:\\Users\\HP\\covid-19-tracker\\src\\util.js",[],"C:\\Users\\HP\\covid-19-tracker\\src\\LineGraph.js",[],["44","45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":15,"column":8,"nodeType":"52","messageId":"53","endLine":15,"endColumn":15},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'numeral' is defined but never used.","Identifier","unusedVar",["56"],["57"],"no-global-assign","no-unsafe-negation"]